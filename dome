#!/usr/bin/env bash
set -euo pipefail

readonly DOME_VERSION="v2.0.0"
readonly DOME_CONFIG="${HOME}/.config/dome/config.yaml"

# Dependencies
readonly DEPS=("git" "yq")

# UI Components
declare -A COLORS=(
  [reset]="\033[0m" [bold]="\033[1m" [dim]="\033[2m"
  [red]="\033[31m" [green]="\033[32m" [yellow]="\033[33m"
  [blue]="\033[34m" [magenta]="\033[35m" [cyan]="\033[36m"
  [bg_blue]="\033[44m" [bg_green]="\033[42m" [bg_red]="\033[41m" [bg_yellow]="\033[43m"
)

declare -A SYMBOLS=(
  [check]="✓" [cross]="✗" [arrow]="➜" [info]=""
  [warn]="⚠" [link]="🔗" [repo]="📦" [home]="🏠" [copy]="📄"
)

# --- UI Helpers ---
print_status() {
  local color="$1" symbol="$2" msg="$3"
  [[ -t 1 ]] && echo -e "${COLORS[bold]}${COLORS[$color]}${SYMBOLS[$symbol]} ${msg}${COLORS[reset]}" || echo "${SYMBOLS[$symbol]} ${msg}"
}
print_success() { print_status "green" "check" "$1"; }
print_error() { print_status "red" "cross" "$1"; }
print_info() { print_status "blue" "arrow" "$1"; }
print_warning() { print_status "yellow" "warn" "$1"; }
print_notice() { print_status "magenta" "info" "$1"; }
print_link() { print_status "cyan" "link" "$1"; }
print_copy() { print_status "green" "copy" "$1"; }

# Function to truncate paths for display in the table
truncate_path() {
  local path="$1" max_length="$2"
  if [[ ${#path} -gt $max_length ]]; then
    local filename=$(basename "$path")
    local dir_max=$((max_length - ${#filename} - 4))
    [[ $dir_max -lt 3 ]] && echo "...${path: -max_length + 3}" || echo ".../${path: -dir_max}/$filename"
  else
    echo "$path"
  fi
}

spinner() {
  local pid=$1 msg=$2 delay=0.15 spinstr='|/-\'
  while kill -0 $pid 2>/dev/null; do
    printf " [%c] %s" "$spinstr" "$msg"
    spinstr=${spinstr#?}${spinstr%"${spinstr#?}"}
    sleep $delay
    printf "\r\033[K"
  done
}

# --- Core Functions ---
resolve_path() {
  [[ "$1" == /* ]] && echo "$1" || echo "$HOME/$1"
}

yaml_get() {
  yq "$1" "$2" 2>/dev/null | sed -e 's/^"\(.*\)"$/\1/' -e "s/^'\(.*\)'$/\1/" | xargs
}

yaml_set() {
  yq -i "$1" "$2"
}

get_repo_root() {
  resolve_path "$(yaml_get '.meta.local_path' "$DOME_CONFIG")"
}

detect_distro() {
  grep -qEi "arch" /etc/os-release 2>/dev/null && echo "arch" && return
  grep -qEi "debian|ubuntu" /etc/os-release 2>/dev/null && echo "debian" && return
  grep -qEi "fedora" /etc/os-release 2>/dev/null && echo "fedora" && return
  echo "generic"
}

run_hook() {
  local hook_name="$1"
  local hook_cmd=$(yaml_get ".hooks.$hook_name" "$DOME_CONFIG")
  [[ -n "$hook_cmd" && "$hook_cmd" != "null" ]] || return 0
  print_notice "Running $hook_name hook..."
  eval "$hook_cmd" || return 1
}

initialize_dome() {
  local custom_repo="" custom_path=""
  [[ $# -gt 0 && "$1" =~ ^(https?:\/\/|git@) ]] && custom_repo="$1" && shift
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -p|--path) custom_path="$2"; shift 2 ;;
      *) shift ;;
    esac
  done

  local default_repo="https://github.com/<yourusername>/dotfiles"
  local default_local_path="${HOME}/.dotfiles"
  print_info "Initializing dotfile manager..."
  mkdir -p "${HOME}/.config/dome"

  if [[ -f "$DOME_CONFIG" ]]; then
    print_info "Config file already exists: $DOME_CONFIG"
    
    if [[ -n "$custom_repo" ]]; then
      yaml_set '.meta.repo = "'"$custom_repo"'"' "$DOME_CONFIG" 
      print_success "Updated repo URL in config file."
    fi

    if [[ -n "$custom_path" ]]; then
      yaml_set '.meta.local_path = "'"$custom_path"'"' "$DOME_CONFIG"
      print_success "Updated local path in config file."
      mkdir -p "$custom_path" && print_success "Created custom path: $custom_path"
      
      if [[ ! -d "$custom_path/.git" ]]; then
        print_info "Cloning repository from $custom_repo into $custom_path"
        git clone "$custom_repo" "$custom_path" --branch "$(yaml_get '.meta.branch' "$DOME_CONFIG")" && print_success "Repository cloned successfully." || { print_error "Failed to clone repository from $custom_repo"; return 1; }
      else
        print_info "Repository already exists at $custom_path"
      fi
    fi

    print_notice "Edit $DOME_CONFIG as needed and run 'dome sync'"
    return 0
  fi

  cat >"$DOME_CONFIG" <<EOF
meta:
  repo: "${custom_repo:-$default_repo}"
  branch: "main"
  local_path: "${custom_path:-$default_local_path}"
hooks:
  conflict_resolver: "meld"
  pre_sync: "echo 'hello world'"
  post_sync: "notify-send 'Dotfiles synced!'"
  pre_push: ""
  post_push: ""
  pre_pull: ""
  post_pull: ""
distro_files:
  .bash_aliases:
    arch: ".bash_aliases.arch"
    debian: ".bash_aliases.debian"
EOF
  print_success "Config file created: $DOME_CONFIG"

  local repo_dir=$(resolve_path "$(yaml_get '.meta.local_path' "$DOME_CONFIG")")
  mkdir -p "$repo_dir" && print_info "Created directory: $repo_dir"
  local repo_url=$(yaml_get '.meta.repo' "$DOME_CONFIG")

  if [[ -z "$repo_url" || "$repo_url" == "$default_repo" ]]; then
    print_info "Using demo repository. Initializing local git repo at $repo_dir"
    [[ ! -d "$repo_dir/.git" ]] && (cd "$repo_dir" && git init) && print_success "Local git repository initialized at $repo_dir"
  else
    if [[ ! -d "$repo_dir/.git" ]]; then
      print_info "Cloning repository from $repo_url into $repo_dir"
      git clone "$repo_url" "$repo_dir" --branch "$(yaml_get '.meta.branch' "$DOME_CONFIG")" && print_success "Repository cloned successfully." || { print_error "Failed to clone repository from $repo_url"; return 1; }
    else
      print_info "Repository already exists at $repo_dir"
    fi
  fi

  local ignore_file="${repo_dir}/.domeignore"
  if [[ ! -f "$ignore_file" ]]; then
    cat >"$ignore_file" <<EOF
# Default dome ignore patterns
.git/
.github/
.domeignore
README.md
LICENSE
EOF
    print_success "Created default .domeignore at: $ignore_file"
  fi

  print_success "Initialization complete!"
  print_notice "Next steps: Edit ${DOME_CONFIG} as needed and run 'dome sync'"
}

is_ignored() {
  local file="$1" repo_root="$2" ignore_file="${repo_root}/.domeignore"
  [[ -f "$ignore_file" ]] || return 1
  [[ "$file" == ".git" || "$file" == ".git/"* || "$file" == ".domeignore" ]] && return 0
  while IFS= read -r pattern; do
    [[ -z "$pattern" || "$pattern" == \#* ]] && continue
    pattern="${pattern%/}"
    [[ "$file" == "$pattern" || "$file" == "$pattern"/* ]] && return 0
  done <"$ignore_file"
  return 1
}

print_table_row() {
  local file="$1" symlinked="$2" backuped="$3" header="${4:-false}"
  local file_color="reset" symlinked_color="reset" backuped_color="reset"
  local file_width=40 symlinked_width=10 backuped_width=20
  local file_margin=$((file_width + 1))

  if [[ "$header" == "true" ]]; then
    file_color="bg_blue" symlinked_color="bg_blue" backuped_color="bg_blue"
  else
    [[ "$symlinked" == "Yes" ]] && symlinked_color="green" || symlinked_color="blue"
    [[ "$backuped" == "--" ]] && backuped_color="dim" || backuped_color="yellow"
  fi

  local display_file
  [[ "$header" == "true" ]] && display_file="$file" || display_file=$(truncate_path "$file" $file_width)

  printf "${COLORS[$file_color]}%-${file_margin}s${COLORS[reset]} " "$display_file"
  printf "${COLORS[$symlinked_color]}%-${symlinked_width}s${COLORS[reset]} " "$symlinked"
  printf "${COLORS[$backuped_color]}%-${backuped_width}s${COLORS[reset]}\n" "$backuped"
}

link_or_copy_file() {
  local source="$1" target="$2" snapshot="$3" no_backup="$4" verbose="$5"
  local symlinked="No" backuped="--"
  mkdir -p "$(dirname "$target")"

  if [[ -e "$target" && "$target" != "$source" ]]; then
    if [[ -L "$target" ]]; then
      [[ "$(readlink "$target")" == "$source" && "$snapshot" != "true" ]] && symlinked="Yes" && [[ "$verbose" == "true" ]] && print_table_row "${target#$HOME/}" "$symlinked" "$backuped" && return 0
    fi
    if [[ "$no_backup" != "true" ]]; then
      local backup="${target}.bak.$(date +%s)"
      [[ "$verbose" != "true" ]] && print_warning "Backing up existing file: ${target} → ${backup}"
      mv "$target" "$backup"
      backuped="$(basename "$backup")"
    else
      rm -f "$target"
    fi
  fi

  if [[ "$snapshot" == "true" ]]; then
    [[ "$verbose" != "true" ]] && print_copy "Copying file: ${source} → ${target}"
    cp -f "$source" "$target"
  else
    [[ "$verbose" != "true" ]] && print_link "Creating symlink: ${target} → ${source}"
    ln -sf "$source" "$target"
    symlinked="Yes"
  fi

  [[ "$verbose" == "true" ]] && print_table_row "${target#$HOME/}" "$symlinked" "$backuped"
}

sync_files() {
  local repo_root=$(get_repo_root) distro=$(detect_distro)
  local snapshot="${1:-false}" no_backup="${2:-false}" verbose="${3:-false}"
  declare -A distro_map used_sources=()

  [[ "$verbose" == "true" ]] && print_info "Syncing dotfiles (verbose mode)..." && echo && print_table_row "File" "Symlinked" "Backuped" "true" && printf "%-41s %-10s %-20s\n" "$(printf '%.0s-' {1..41})" "$(printf '%.0s-' {1..10})" "$(printf '%.0s-' {1..20})" || print_info "Detected distribution: ${distro}"

  while IFS= read -r key; do
    local src=$(yaml_get ".distro_files[\"$key\"].$distro" "$DOME_CONFIG")
    [[ -z "$src" ]] && continue
    distro_map["$key"]="$src"
    used_sources["$src"]=1
    [[ "$verbose" != "true" ]] && print_notice "Using distro variant: ${key} → ${src}"
  done < <(yaml_get '.distro_files | keys | .[]' "$DOME_CONFIG")

  for key in "${!distro_map[@]}"; do
    local src="${repo_root}/${distro_map[$key]}" target="${HOME}/${key}"
    [[ -f "$src" ]] && link_or_copy_file "$src" "$target" "$snapshot" "$no_backup" "$verbose"
  done

  [[ "$verbose" != "true" ]] && print_info "Syncing common dotfiles..."
  while IFS= read -r -d $'\0' file; do
    local rel_file="${file#${repo_root}/}"
    [[ "${used_sources[$rel_file]:-}" == "1" ]] && continue
    is_ignored "$rel_file" "$repo_root" && continue
    local target="${HOME}/${rel_file}"
    [[ -f "$file" ]] && link_or_copy_file "$file" "$target" "$snapshot" "$no_backup" "$verbose"
  done < <(find "$repo_root" -type f -print0)

  [[ "$verbose" == "true" ]] && echo
}

perform_sync() {
  local snapshot="false" no_backup="false" verbose="false"
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -s|--snapshot) snapshot="true"; shift ;;
      -n|--no-back) no_backup="true"; shift ;;
      -v|--verbose) verbose="true"; shift ;;
      *) shift ;;
    esac
  done

  run_hook "pre_sync"
  [[ "$snapshot" == "true" ]] && print_info "Starting sync in snapshot mode (copying files)..." || print_info "Starting sync in symlink mode..."
  [[ "$no_backup" == "true" ]] && print_notice "Backup creation is disabled"
  sync_files "$snapshot" "$no_backup" "$verbose"
  run_hook "post_sync"
  print_success "Sync completed successfully!"
}

dome_pull() {
  run_hook "pre_pull"
  print_info "Pulling updates..."
  git -C "$(get_repo_root)" pull origin "$(yaml_get '.meta.branch' "$DOME_CONFIG")"
  run_hook "post_pull"
  print_success "Repository updated successfully!"
}

dome_push() {
  run_hook "pre_push"
  print_info "Pushing changes..."
  git -C "$(get_repo_root)" push origin "$(yaml_get '.meta.branch' "$DOME_CONFIG")"
  run_hook "post_push"
  print_success "Changes pushed successfully!"
}

# --- Main ---
usage() {
  echo -e "${COLORS[bold]}dome ${DOME_VERSION}${COLORS[reset]}"
  cat <<EOF
Usage: dome [command] [options]
Commands:
  init [options]     Initialize configuration
  sync [options]     Sync dotfiles
  pull               Update from remote
  push               Publish changes
  -h                 Show help
  -v                 Show version
Init Options:
  -p, --path         Custom local path for dotfiles
Sync Options:
  -s, --snapshot     Copy files
  -n, --no-back      No backups
  -v, --verbose      Verbose output
EOF
}

main() {
  local cmd="${1:-}"
  shift 2>/dev/null || true
  case "$cmd" in
    init) initialize_dome "$@" ;;
    sync) perform_sync "$@" ;;
    pull) dome_pull ;;
    push) dome_push ;;
    -v) echo -e "${COLORS[bold]}dome ${DOME_VERSION}${COLORS[reset]}" ;;
    -h|*) usage ;;
  esac
}

main "$@"