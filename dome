#!/usr/bin/env bash
set -euo pipefail

# Global error trap for graceful failure.
trap 'print_error "An unexpected error occurred. Exiting."' ERR

# --- Dependency Check ---
readonly DEPS=("git" "yq")
check_dependencies() {
  for cmd in "${DEPS[@]}"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      echo -e "\033[31m✗ Dependency '$cmd' is not installed. Aborting.\033[0m" >&2
      exit 1
    fi
  done
}
check_dependencies

# --- Distro Detection ---
detect_distro() {
  grep -qEi "arch" /etc/os-release 2>/dev/null && echo "arch" && return
  grep -qEi "debian|ubuntu" /etc/os-release 2>/dev/null && echo "debian" && return
  grep -qEi "fedora" /etc/os-release 2>/dev/null && echo "fedora" && return
  echo "generic"
}

# --- Constants ---
readonly DOME_VERSION="v2.0.0-star-dust"
readonly DOME_CONFIG="${HOME}/.config/dome/config.yaml"
# Base backup directory for all backups organized by distro.
readonly BACKUP_BASE_DIR="${HOME}/.config/dome/backups"

# --- UI Components ---
declare -A COLORS=(
  [reset]="\033[0m" [bold]="\033[1m" [dim]="\033[2m"
  [red]="\033[31m" [green]="\033[32m" [yellow]="\033[33m"
  [blue]="\033[34m" [magenta]="\033[35m" [cyan]="\033[36m"
  [bg_blue]="\033[44m" [bg_green]="\033[42m" [bg_red]="\033[41m" [bg_yellow]="\033[43m"
)

declare -A SYMBOLS=(
  [check]="✓" [cross]="✗" [arrow]="➜" [info]=""
  [warn]="⚠" [link]="🔗" [repo]="📦" [home]="🏠" [copy]="📄"
)

# --- UI Helpers ---
print_status() {
  local color="$1" symbol="$2" msg="$3"
  if [[ -t 1 ]]; then
    echo -e "${COLORS[bold]}${COLORS[$color]}${SYMBOLS[$symbol]} ${msg}${COLORS[reset]}"
  else
    echo "${SYMBOLS[$symbol]} ${msg}"
  fi
}

print_success() { print_status "green" "check" "$1"; }
print_error() { print_status "red" "cross" "$1"; }
print_info() { print_status "blue" "arrow" "$1"; }
print_warning() { print_status "yellow" "warn" "$1"; }
print_notice() { print_status "magenta" "info" "$1"; }
print_link() { print_status "cyan" "link" "$1"; }
print_copy() { print_status "green" "copy" "$1"; }

# Truncate long paths for display.
truncate_path() {
  local path="$1"
  local max_length="$2"
  if ((${#path} > max_length)); then
    local filename
    filename=$(basename "$path")
    local dir_max=$((max_length - ${#filename} - 4))
    if ((dir_max < 3)); then
      local trunc_length=$((max_length - 3))
      echo "..."${path: -trunc_length}
    else
      echo ".../${path: -dir_max}/$filename"
    fi
  else
    echo "$path"
  fi
}

# Spinner for visual feedback during long operations.
spinner() {
  local pid=$1 msg=$2 delay=0.15 spinstr='|/-\'
  while kill -0 $pid 2>/dev/null; do
    printf " [%c] %s" "$spinstr" "$msg"
    spinstr=${spinstr#?}${spinstr%"${spinstr#?}"}
    sleep $delay
    printf "\r\033[K"
  done
}

# --- Core Functions ---

# Updated resolve_path:
# - If path starts with "/" use it as-is.
# - If it starts with "~" expand it.
# - Otherwise, force it under $HOME.
resolve_path() {
  local path="$1"
  if [[ "$path" == /* ]]; then
    echo "$path"
  elif [[ "$path" == "~"* ]]; then
    echo "${path/#\~/$HOME}"
  else
    echo "$HOME/$path"
  fi
}

# YAML getter with file existence check.
yaml_get() {
  if [[ ! -f "$2" ]]; then
    print_error "YAML file not found: $2"
    exit 1
  fi
  yq -e "$1" "$2" | sed -e 's/^"\(.*\)"$/\1/' | xargs
}

# YAML setter with file existence check.
yaml_set() {
  if [[ ! -f "$2" ]]; then
    print_error "YAML file not found: $2"
    exit 1
  fi
  yq -i "$1" "$2"
}

get_repo_root() {
  resolve_path "$(yaml_get '.meta.local_path' "$DOME_CONFIG")"
}

# Run hook commands in a subshell.
run_hook() {
  local hook_name="$1"
  local hook_cmd
  hook_cmd=$(yaml_get ".hooks.$hook_name" "$DOME_CONFIG")
  [[ -n "$hook_cmd" && "$hook_cmd" != "null" ]] || return 0
  print_notice "Running $hook_name hook..."
  (eval "$hook_cmd") || {
    print_error "Hook '$hook_name' failed."
    return 1
  }
}

# Initialize dome configuration.
# If a custom path is provided via -p, the repository is forced to reside under $HOME.
initialize_dome() {
  local custom_repo="" custom_path=""
  if [[ $# -gt 0 && "$1" =~ ^(https?:\/\/|git@) ]]; then
    custom_repo="$1"
    shift
  fi
  while getopts "p:" opt; do
    case "$opt" in
    p) custom_path="$OPTARG" ;;
    *) ;;
    esac
  done
  shift $((OPTIND - 1))

  local default_repo="https://github.com/<yourusername>/dotfiles"
  local default_local_path="${HOME}/.dotfiles"
  local repo
  repo=$(yaml_get '.meta.repo' "$DOME_CONFIG" 2>/dev/null || echo "")
  local final_path
  final_path=$(yaml_get '.meta.local_path' "$DOME_CONFIG" 2>/dev/null || echo "")

  repo="${custom_repo:-${repo:-$default_repo}}"
  final_path="${custom_path:-${final_path:-$default_local_path}}"
  # Force final_path under $HOME
  final_path=$(resolve_path "$final_path")

  print_info "Initializing dotfile manager..."
  mkdir -p "$(dirname "$DOME_CONFIG")"

  if [[ -f "$DOME_CONFIG" ]]; then
    print_info "Config file already exists: $DOME_CONFIG"
    [[ -n "$custom_repo" ]] && {
      yaml_set '.meta.repo = "'"$custom_repo"'"' "$DOME_CONFIG"
      print_success "Updated repo URL in config file."
    }
    [[ -n "$custom_path" ]] && {
      yaml_set '.meta.local_path = "'"$custom_path"'"' "$DOME_CONFIG"
      print_success "Updated local path in config file."
      mkdir -p "$final_path" && print_success "Created custom path: $final_path"
    }
  else
    cat >"$DOME_CONFIG" <<EOF
meta:
  repo: "${custom_repo:-$default_repo}"
  branch: "main"
  local_path: "${custom_path:-$default_local_path}"
hooks:
  conflict_resolver: "meld"
  pre_sync: "echo 'hello world'"
  post_sync: "notify-send 'Dotfiles synced!'"
  pre_push: ""
  post_push: ""
  pre_pull: ""
  post_pull: ""
distro_files:
  .bash_aliases:
    arch: ".bash_aliases.arch"
    debian: ".bash_aliases.debian"
EOF
    print_success "Config file created: $DOME_CONFIG"
  fi

  if [[ "$repo" == "$default_repo" ]]; then
    print_error "The repository URL is set to the default/demo URL. Please update it in the config file: $DOME_CONFIG"
    return 1
  fi

  if [[ ! -d "$final_path/.git" ]]; then
    if [[ -n "$(ls -A "$final_path" 2>/dev/null)" ]]; then
      print_error "Directory $final_path already exists and is not empty."
      return 1
    fi
    print_info "Cloning repository from ${repo} into $final_path"
    git clone "${repo}" "$final_path" --branch "$(yaml_get '.meta.branch' "$DOME_CONFIG")" &&
      print_success "Repository cloned successfully." || {
      print_error "Failed to clone repository from ${repo}"
      return 1
    }
  else
    print_info "Repository already exists at $final_path"
    local ignore_file="${final_path}/.domeignore"
    if [[ ! -f "$ignore_file" ]]; then
      mkdir -p "$(dirname "$ignore_file")"
      cat >"$ignore_file" <<EOF
# Default dome ignore patterns
.git/
.github/
.domeignore
README.md
LICENSE
EOF
      print_success "Created default .domeignore at: $ignore_file"
    fi
  fi

  print_success "Initialization complete!"
  print_notice "Next steps: Edit ${DOME_CONFIG} as needed and run 'dome sync'"
}

# Check if a file should be ignored based on .domeignore.
is_ignored() {
  local file="$1" repo_root="$2" ignore_file="${repo_root}/.domeignore"
  [[ -f "$ignore_file" ]] || return 1
  [[ "$file" == ".git" || "$file" == ".git/"* || "$file" == ".domeignore" ]] && return 0

  while IFS= read -r pattern; do
    [[ -z "$pattern" || "$pattern" == \#* ]] && continue
    local negate=0
    if [[ "$pattern" == !* ]]; then
      negate=1
      pattern="${pattern:1}"
    fi
    pattern="${pattern%/}"
    pattern=$(echo "$pattern" | sed 's/[.[\*^$(){}?+|]/\\&/g; s/\*/.*/g; s/\?/./g; s/^/\\^/; s/$/\\$/')
    if [[ "$file" =~ $pattern ]]; then
      if [[ $negate -eq 1 ]]; then
        return 1
      else
        return 0
      fi
    fi
  done <"$ignore_file"
  return 1
}

# Print a formatted table row.
print_table_row() {
  local file="$1" symlinked="$2" backuped="$3" header="${4:-false}"
  local file_color="reset" symlinked_color="reset" backuped_color="reset"
  local file_width=40 symlinked_width=10 backuped_width=20
  local file_margin=$((file_width + 1))

  if [[ "$header" == "true" ]]; then
    file_color="bg_blue" symlinked_color="bg_blue" backuped_color="bg_blue"
  else
    [[ "$symlinked" == "Yes" ]] && symlinked_color="green" || symlinked_color="blue"
    [[ "$backuped" == "--" ]] && backuped_color="dim" || backuped_color="yellow"
  fi

  local display_file
  [[ "$header" == "true" ]] && display_file="$file" || display_file=$(truncate_path "$file" $file_width)
  printf "${COLORS[$file_color]}%-${file_margin}s${COLORS[reset]} " "$display_file"
  printf "${COLORS[$symlinked_color]}%-${symlinked_width}s${COLORS[reset]} " "$symlinked"
  printf "${COLORS[$backuped_color]}%-${backuped_width}s${COLORS[reset]}\n" "$backuped"
}

# Create a symlink or copy a file—with backup—using the provided backup directory.
link_or_copy_file() {
  local source="$1" target="$2" snapshot="$3" no_backup="$4" verbose="$5" backup_dir="$6"
  local symlinked="No" backuped="--"
  mkdir -p "$(dirname "$target")"

  if [[ -e "$target" && "$target" != "$source" ]]; then
    if [[ -L "$target" ]]; then
      if [[ "$(readlink "$target")" == "$source" && "$snapshot" != "true" ]]; then
        symlinked="Yes"
        [[ "$verbose" == "true" ]] && print_table_row "${target#$HOME/}" "$symlinked" "$backuped"
        return 0
      fi
    fi
    if [[ "$no_backup" != "true" ]]; then
      local backup="${backup_dir}/${target#$HOME/}"
      mkdir -p "$(dirname "$backup")"
      print_warning "Backing up existing file: ${target} → ${backup}"
      mv "$target" "$backup"
      backuped="$(basename "$backup")"
    else
      rm -f "$target"
    fi
  fi

  if [[ "$snapshot" == "true" ]]; then
    print_copy "Copying file: ${source} → ${target}"
    cp -f "$source" "$target"
  else
    print_link "Creating symlink: ${target} → ${source}"
    ln -sf "$source" "$target"
    symlinked="Yes"
  fi

  [[ "$verbose" == "true" ]] && print_table_row "${target#$HOME/}" "$symlinked" "$backuped"
}

# Sync dotfiles using distro-specific configurations.
sync_files() {
  local repo_root distro snapshot no_backup verbose backup_dir
  repo_root=$(get_repo_root)
  distro=$(detect_distro)
  snapshot="${1:-false}"
  no_backup="${2:-false}"
  verbose="${3:-false}"
  declare -A distro_map

  # Create a backup directory only if backups are enabled.
  if [[ "$no_backup" != "true" ]]; then
    backup_dir="${BACKUP_BASE_DIR}/${distro}/bak_$(date +%s)_$RANDOM"
    mkdir -p "${BACKUP_BASE_DIR}/${distro}"
  else
    backup_dir=""
  fi

  if [[ "$verbose" == "true" ]]; then
    print_info "Syncing dotfiles (verbose mode)..."
    echo
    print_table_row "File" "Symlinked" "Backuped" "true"
    printf "%-41s %-10s %-20s\n" "$(printf '%.0s-' {1..41})" "$(printf '%.0s-' {1..10})" "$(printf '%.0s-' {1..20})"
  else
    print_info "Detected distribution: ${distro}"
  fi

  # Map each dotfile to its distro-specific source.
  while IFS= read -r key; do
    local src
    src=$(yaml_get ".distro_files[\"$key\"].$distro" "$DOME_CONFIG")
    if [[ -n "$src" ]]; then
      distro_map["$key"]="$src"
      [[ "$verbose" != "true" ]] && print_notice "Using distro variant: ${key} → ${src}"
    fi
  done < <(yaml_get '.distro_files | keys | .[]' "$DOME_CONFIG")

  for key in "${!distro_map[@]}"; do
    local src="${repo_root}/${distro_map[$key]}"
    local target="${HOME}/${key}"
    if [[ -f "$src" ]]; then
      link_or_copy_file "$src" "$target" "$snapshot" "$no_backup" "$verbose" "$backup_dir"
    fi
  done

  [[ "$verbose" == "true" ]] && echo
}

# Perform sync with improved option parsing.
perform_sync() {
  local snapshot="false" no_backup="false" verbose="false"
  while getopts "snv" opt; do
    case "$opt" in
    s) snapshot="true" ;;
    n) no_backup="true" ;;
    v) verbose="true" ;;
    *) ;;
    esac
  done
  shift $((OPTIND - 1))
  run_hook "pre_sync"
  if [[ "$snapshot" == "true" ]]; then
    print_info "Starting sync in snapshot mode (copying files)..."
  else
    print_info "Starting sync in symlink mode..."
  fi
  [[ "$no_backup" == "true" ]] && print_notice "Backup creation is disabled"
  sync_files "$snapshot" "$no_backup" "$verbose"
  run_hook "post_sync"
  print_success "Sync completed successfully!"
}

# Revert dotfiles using backups organized per distro.
revert_backup() {
  local backup_dir="${1:-}"
  local distro
  distro=$(detect_distro)
  local backup_base="${BACKUP_BASE_DIR}/${distro}"

  if [[ -z "$backup_dir" ]]; then
    backup_dir=$(ls -td "${backup_base}"/bak_* 2>/dev/null | head -1 || true)
    if [[ -z "$backup_dir" ]]; then
      print_error "No backup directories found for distro ${distro}."
      return 1
    else
      print_info "No backup directory specified. Using latest backup: $backup_dir"
    fi
  fi

  if [[ ! -d "$backup_dir" ]]; then
    print_error "Backup directory does not exist: $backup_dir"
    return 1
  fi

  while IFS= read -r -d $'\0' backup_file; do
    local original_file="${HOME}/${backup_file#${backup_dir}/}"
    mkdir -p "$(dirname "$original_file")"
    mv "$backup_file" "$original_file"
    print_success "Restored $original_file from $backup_file"
  done < <(find "$backup_dir" -type f -print0)

  print_success "Reversion to backups completed!"
}

dome_pull() {
  run_hook "pre_pull"
  print_info "Pulling updates..."
  git -C "$(get_repo_root)" pull origin "$(yaml_get '.meta.branch' "$DOME_CONFIG")"
  run_hook "post_pull"
  print_success "Repository updated successfully!"
}

dome_push() {
  run_hook "pre_push"
  print_info "Pushing changes..."
  git -C "$(get_repo_root)" push origin "$(yaml_get '.meta.branch' "$DOME_CONFIG")"
  run_hook "post_push"
  print_success "Changes pushed successfully!"
}

# --- Main ---
usage() {
  echo -e "${COLORS[bold]}dome ${DOME_VERSION}${COLORS[reset]}"
  cat <<EOF
Usage: dome [command] [options]
Commands:
  init [options]     Initialize configuration
  sync [options]     Sync dotfiles
  pull               Update from remote
  push               Publish changes
  revert [dir]       Revert to backed up dotfiles from specified directory (or latest backup for current distro)
  -h                 Show help
  -v                 Show version
Init Options:
  -p <path>          Custom local path for dotfiles (forced under \$HOME)
Sync Options:
  -s                 Snapshot mode (copy files)
  -n                 No backups
  -v                 Verbose output
EOF
}

main() {
  local cmd="${1:-}"
  shift || true
  case "$cmd" in
  init) initialize_dome "$@" ;;
  sync) perform_sync "$@" ;;
  pull) dome_pull ;;
  push) dome_push ;;
  revert) revert_backup "$@" ;;
  -v) echo -e "${COLORS[bold]}dome ${DOME_VERSION}${COLORS[reset]}" ;;
  -h | *) usage ;;
  esac
}

main "$@"
